import smtplib
from tkinter import *
from tkinter import filedialog, colorchooser
import tkinter.messagebox

from PIL import ImageTk
from stegan import stegan
from proj_py.change_filetype import *
from proj_py.eng_watermark import *
from RSA import AESCipher
from sendemail import sendemail

s = stegan()


def check_file_error():
    if s.error_count == 1:
        tkinter.messagebox.showwarning(title='Warning', message='The file is not found!')
    elif s.error_count == 2:
        tkinter.messagebox.showwarning(title='Warning', message='The password is wrong!')
    else:
        tkinter.messagebox.showinfo(title='Infomation', message='Completed!')


def check_file_repeat(file):
    if os.path.isfile(file):
        tkinter.messagebox.showwarning(title='Warning', message='Please change file name!')
        return bool(0)
    else:
        return bool(1)


def check_file_size_bits(file, hidden_file_size):
    s.count_filesize_forwav_bit(file)
    if s.real_bit_count * 8 < hidden_file_size:
        tkinter.messagebox.showwarning(title='Warning', message='The Hidden file is too big!')
        return bool(0)
    else:
        return bool(1)


class SteganGUI:
    def __init__(self, master):
        self.root = master
        self.root.config()
        self.root.geometry("800x600")
        self.root.resizable(0, 0)
        self.root.title("A GUI of Steganography")

        words_hidden(self.root)


class words_hidden:
    def __init__(self, master):
        def change_words_show():
            self.words_hidden.destroy()
            menuBar.destroy()
            words_show(self.root)

        def change_digital_watermark():
            self.words_hidden.destroy()
            menuBar.destroy()
            digitalwatermark(self.root)

        def change_file_hidden():
            self.words_hidden.destroy()
            menuBar.destroy()
            file_hidden(self.root)

        def change_file_show():
            self.words_hidden.destroy()
            menuBar.destroy()
            file_show(self.root)

        def change_send_email():
            self.words_hidden.destroy()
            menuBar.destroy()
            send_email(self.root)

        def _quit():
            self.root.quit()
            self.root.destroy()
            exit()

        self.root = master
        self.root.config()
        self.words_hidden = Frame(self.root)
        self.words_hidden.grid()

        # Creating a Menu Bar
        menuBar = Menu(self.root)
        self.root.config(menu=menuBar)

        # Add menu items
        fileMenu = Menu(menuBar, tearoff=0)
        fileMenu.add_command(label="Exit", command=_quit)
        menuBar.add_cascade(label="File", menu=fileMenu)

        fileMode = Menu(menuBar, tearoff=0)
        fileMode.add_command(label="Words Shown Mode", command=change_words_show)
        fileMode.add_command(label="File Hidden Mode", command=change_file_hidden)
        fileMode.add_command(label="File Shown Mode", command=change_file_show)
        fileMode.add_command(label="Digital Watermark", command=change_digital_watermark)
        fileMode.add_command(label="Send email", command=change_send_email)
        menuBar.add_cascade(label="Mode", menu=fileMode)

        def fileDialog():
            filename.set(filedialog.askopenfilename(initialdir="/", title="Select file",
                                                    filetypes=(
                                                        ("bmp, wav, png, flac files", "*.bmp *.wav *.png *.flac"),
                                                        ("all files", " *.* "))))

        def fileDialog2(savefile):
            savefile.set(filedialog.asksaveasfilename(initialdir="/", title="Save as",
                                                      filetypes=(
                                                          ("bmp, wav, png, flac files", "*.bmp *.wav *.png *.flac"),
                                                          ("all files", " *.* "))))

        def hidden():
            if filename.get() != "":
                if input_password.get() != "":
                    if self.input_con.get(1.0, "end-1c") != "":
                        s.setinput_password(input_password.get())
                        aes = AESCipher(input_password.get())
                        s.setinput(aes.encrypt(self.input_con.get(1.0, "end-1c")).decode())
                        s.set_passrange(self.turn_range.get())
                        savefile = StringVar()
                        fileDialog2(savefile)
                        if savefile.get() != "":
                            if filename.get().endswith('.bmp'):
                                s.bmphidden(filename.get(), savefile.get())

                            elif filename.get().endswith('wav'):
                                s.wavhidden(filename.get(), savefile.get())

                            elif filename.get().endswith('.png'):
                                changed_filename = os.path.splitext(filename.get())[0] + ".bmp"
                                changed_savefile = os.path.splitext(savefile.get())[0] + ".bmp"
                                if check_file_repeat(changed_filename):
                                    if check_file_repeat(changed_savefile):
                                        change(filename.get())
                                        s.bmphidden(changed_filename, changed_savefile)
                                        change(changed_savefile)
                                        os.remove(changed_savefile)
                                        os.remove(changed_filename)

                            elif filename.get().endswith('.flac'):
                                changed_filename = os.path.splitext(filename.get())[0] + ".wav"
                                changed_savefile = os.path.splitext(savefile.get())[0] + ".wav"
                                if check_file_repeat(changed_filename):
                                    if check_file_repeat(changed_savefile):
                                        change(filename.get())
                                        s.wavhidden(changed_filename, changed_savefile)
                                        change(changed_savefile)
                                        os.remove(changed_savefile)
                                        os.remove(changed_filename)

                            else:
                                tkinter.messagebox.showwarning(title='Warning',
                                                               message='The file type error!')

                            check_file_error()
                            self.file_name.delete(0, END)
                            self.input_pass.delete(0, END)
                            self.input_con.delete(1.0, END)
                            var.set("0")
                        else:
                            tkinter.messagebox.showwarning(title='Warning', message='You miss the saving file name!')
                    else:
                        tkinter.messagebox.showwarning(title='Warning', message='You must input words!')
                else:
                    tkinter.messagebox.showwarning(title='Warning', message='You must set the password!')
            else:
                tkinter.messagebox.showwarning(title='Warning', message='You must put the file in!')

        def clear():
            self.file_name.delete(0, END)
            self.input_pass.delete(0, END)
            self.input_con.delete(1.0, END)
            var.set("0")

        def update(event):
            var.set(str(s.real_word_count - len(self.input_con.get("1.0", 'end-1c'))))

        def count_filesize():
            if filename.get() != "":
                if input_password.get() != "":
                    s.set_passrange(self.turn_range.get())
                    s.setinput_password(input_password.get())
                    if filename.get().endswith('.bmp'):
                        s.count_filesize_forbmp(filename.get())
                        tkinter.messagebox.showwarning(title='Information',
                                                       message='You can input ' + str(s.real_word_count) + ' words!')

                    elif filename.get().endswith('wav'):
                        s.count_filesize_forwav(filename.get())
                        tkinter.messagebox.showwarning(title='Information',
                                                       message='You can input ' + str(s.real_word_count) + ' words!')

                    elif filename.get().endswith('.png'):
                        changed_filename = os.path.splitext(filename.get())[0] + ".bmp"
                        if check_file_repeat(changed_filename):
                            change(filename.get())
                            s.count_filesize_forbmp(changed_filename)
                            os.remove(changed_filename)
                            tkinter.messagebox.showwarning(title='Information', message='You can input ' + str(
                                s.real_word_count) + ' words!')

                    elif filename.get().endswith('.flac'):
                        changed_filename = os.path.splitext(filename.get())[0] + ".wav"
                        if check_file_repeat(changed_filename):
                            change(filename.get())
                            s.count_filesize_forwav(changed_filename)
                            os.remove(changed_filename)
                            tkinter.messagebox.showwarning(title='Information', message='You can input ' + str(
                                s.real_word_count) + ' words!')

                    else:
                        tkinter.messagebox.showwarning(title='Warning',
                                                       message='The file type error!')
                else:
                    tkinter.messagebox.showwarning(title='Warning', message='You must set the password!')
            else:
                tkinter.messagebox.showwarning(title='Warning', message='You must put the file in!')

        self.top_title = Label(self.words_hidden, text="HIDDEN")
        self.top_title.grid(row=1, column=1)

        self.file_browse = Label(self.words_hidden, text="File: ")
        self.file_browse.grid(row=2)

        filename = StringVar()
        self.file_name = Entry(self.words_hidden, textvariable=filename, width=40)
        self.file_name.grid(row=2, column=1)

        self.browse_button = Button(self.words_hidden, text="Browse", command=fileDialog)
        self.browse_button.grid(row=2, column=2)

        self.top_password = Label(self.words_hidden, text="Password: ")
        self.top_password.grid(row=3)

        input_password = StringVar()
        self.input_pass = Entry(self.words_hidden, show="*", textvariable=input_password, width=40)
        self.input_pass.grid(row=3, column=1)

        self.charCountLabel = Label(self.words_hidden, text="Words reminder: ")
        self.charCountLabel.grid(row=4, column=0)

        var = StringVar()
        self.charCount = Label(self.words_hidden, textvariable=var)
        self.charCount.grid(row=4, column=1)

        self.charCountButton = Button(self.words_hidden, text="count", command=count_filesize)
        self.charCountButton.grid(row=4, column=2)

        self.top_content = Label(self.words_hidden, text="Input content: ")
        self.top_content.grid(row=5)

        self.input_con = Text(self.words_hidden, width=60, height=20)
        self.input_con.grid(row=5, column=1)
        self.input_con.bind("<KeyRelease>", update)

        self.ok_button = Button(self.words_hidden, text="OK", command=hidden)
        self.ok_button.grid(row=5, column=2)

        self.clear_button = Button(self.words_hidden, text="clear", command=clear)
        self.clear_button.grid(row=5, column=3)

        self.password_range = Label(self.words_hidden, text="Password strength: ")
        self.password_range.grid(row=6)

        self.turn_range = Scale(self.words_hidden, from_=1, to=127, orient=HORIZONTAL, length=300, tickinterval=126)
        self.turn_range.grid(row=6, column=1)


class words_show:
    def __init__(self, master):
        def change_words_hidden():
            self.words_show.destroy()
            menuBar.destroy()
            words_hidden(self.root)

        def change_digital_watermark():
            self.words_show.destroy()
            menuBar.destroy()
            digitalwatermark(self.root)

        def change_file_hidden():
            self.words_show.destroy()
            menuBar.destroy()
            file_hidden(self.root)

        def change_file_show():
            self.words_show.destroy()
            menuBar.destroy()
            file_show(self.root)

        def change_send_email():
            self.words_show.destroy()
            menuBar.destroy()
            send_email(self.root)

        self.root = master
        self.root.config()
        self.words_show = Frame(self.root)
        self.words_show.grid()

        def _quit():
            self.root.quit()
            self.root.destroy()
            exit()

        self.root = master
        self.root.config()
        self.words_hidden = Frame(self.root)
        self.words_hidden.grid()

        # Creating a Menu Bar
        menuBar = Menu(self.root)
        self.root.config(menu=menuBar)

        # Add menu items
        fileMenu = Menu(menuBar, tearoff=0)
        fileMenu.add_command(label="Exit", command=_quit)
        menuBar.add_cascade(label="File", menu=fileMenu)

        fileMode = Menu(menuBar, tearoff=0)
        fileMode.add_command(label="Words Hidden Mode", command=change_words_hidden)
        fileMode.add_command(label="File Hidden Mode", command=change_file_hidden)
        fileMode.add_command(label="File Shown Mode", command=change_file_show)
        fileMode.add_command(label="Digital Watermark", command=change_digital_watermark)
        fileMode.add_command(label="Send email", command=change_send_email)
        menuBar.add_cascade(label="Mode", menu=fileMode)

        def fileDialog():
            filename.set(filedialog.askopenfilename(initialdir="/", title="Select file",
                                                    filetypes=(
                                                        ("bmp, wav, png, flac files", "*.bmp *.wav *.png *.flac"),
                                                        ("all files", " *.* "))))

        def show():
            if filename.get() != "":
                if input_password.get() != "":
                    s.setpassword(input_password.get())
                    aes = AESCipher(input_password.get())
                    if filename.get().endswith('.bmp'):
                        s.bmpshow(filename.get())

                    elif filename.get().endswith('.wav'):
                        s.wavshow(filename.get())

                    elif filename.get().endswith('.png'):
                        changed_filename = os.path.splitext(filename.get())[0] + ".bmp"
                        if check_file_repeat(changed_filename):
                            change(filename.get())
                            s.bmpshow(changed_filename)
                            os.remove(changed_filename)

                    elif filename.get().endswith('.flac'):
                        changed_filename = os.path.splitext(filename.get())[0] + ".wav"
                        if check_file_repeat(changed_filename):
                            change(filename.get())
                            s.wavshow(changed_filename)
                            os.remove(changed_filename)

                    else:
                        tkinter.messagebox.showwarning(title='Warning',
                                                       message='The file type error!')

                    check_file_error()
                    self.get_con.configure(state=NORMAL)
                    self.get_con.insert(1.0, aes.decrypt(s.content))
                    self.get_con.configure(state=DISABLED)
                    self.file_name.delete(0, END)
                    self.input_pass.delete(0, END)
                else:
                    tkinter.messagebox.showwarning(title='Warning', message='You must set the password!')
            else:
                tkinter.messagebox.showwarning(title='Warning', message='You must put the file in!')

        def clear():
            self.file_name.delete(0, END)
            self.input_pass.delete(0, END)
            self.get_con.configure(state=NORMAL)
            self.get_con.delete(1.0, END)
            self.get_con.configure(state=DISABLED)

        self.top_title = Label(self.words_show, text="SHOWN")
        self.top_title.grid(row=1, column=1)

        self.file_browse = Label(self.words_show, text="File: ")
        self.file_browse.grid(row=2)

        filename = StringVar()
        self.file_name = Entry(self.words_show, textvariable=filename, width=40)
        self.file_name.grid(row=2, column=1)

        self.browse_button = Button(self.words_show, text="Browse", command=fileDialog)
        self.browse_button.grid(row=2, column=2)

        self.top_password = Label(self.words_show, text="Password: ")
        self.top_password.grid(row=3)

        input_password = StringVar()
        self.input_pass = Entry(self.words_show, show="*", textvariable=input_password, width=40)
        self.input_pass.grid(row=3, column=1)

        self.top_content = Label(self.words_show, text="Show hidden content: ")
        self.top_content.grid(row=4)

        self.get_con = Text(self.words_show, width=60, height=20)
        self.get_con.configure(state=DISABLED)
        self.get_con.grid(row=4, column=1)

        self.ok_button = Button(self.words_show, text="OK", command=show)
        self.ok_button.grid(row=3, column=2)

        self.clear_button = Button(self.words_show, text="clear", command=clear)
        self.clear_button.grid(row=3, column=3)


class file_hidden:
    def __init__(self, master):
        def change_words_hidden():
            self.file_hidden.destroy()
            menuBar.destroy()
            words_hidden(self.root)

        def change_words_show():
            self.file_hidden.destroy()
            menuBar.destroy()
            words_show(self.root)

        def change_digital_watermark():
            self.file_hidden.destroy()
            menuBar.destroy()
            digitalwatermark(self.root)

        def change_file_show():
            self.file_hidden.destroy()
            menuBar.destroy()
            file_show(self.root)

        def change_send_email():
            self.file_hidden.destroy()
            menuBar.destroy()
            send_email(self.root)

        def _quit():
            self.root.quit()
            self.root.destroy()
            exit()

        self.root = master
        self.root.config()
        self.file_hidden = Frame(self.root)
        self.file_hidden.grid()

        # Creating a Menu Bar
        menuBar = Menu(self.root)
        self.root.config(menu=menuBar)

        # Add menu items
        fileMenu = Menu(menuBar, tearoff=0)
        fileMenu.add_command(label="Exit", command=_quit)
        menuBar.add_cascade(label="File", menu=fileMenu)

        fileMode = Menu(menuBar, tearoff=0)
        fileMode.add_command(label="Words Hidden Mode", command=change_words_hidden)
        fileMode.add_command(label="Words Shown Mode", command=change_words_show)
        fileMode.add_command(label="File Shown Mode", command=change_file_show)
        fileMode.add_command(label="Digital Watermark", command=change_digital_watermark)
        fileMode.add_command(label="Send email", command=change_send_email)
        menuBar.add_cascade(label="Mode", menu=fileMode)

        def fileDialog():
            filename2.set(filedialog.askopenfilename(initialdir="/", title="Select file",
                                                     filetypes=(
                                                         ("bmp, wav, png, flac files", "*.bmp *.wav *.png *.flac"),
                                                         ("all files", " *.* "))))

        def fileDialog_forbigfile():
            filename.set(filedialog.askopenfilename(initialdir="/", title="Select file",
                                                    filetypes=(
                                                        ("wav, flac files", "*.wav *.flac"),
                                                        ("all files", " *.* "))))

        def fileDialog_forbigfile2(savefile):
            savefile.set(filedialog.asksaveasfilename(initialdir="/", title="Save as",
                                                      filetypes=(
                                                          ("wav, flac files", "*.wav *.flac"),
                                                          ("all files", " *.* "))))

        def hidden():
            if filename.get() != "":
                if input_password.get() != "":
                    if filename2.get() != "":
                        s.setinput_password(input_password.get())
                        s.set_passrange(self.turn_range.get())
                        savefile = StringVar()
                        fileDialog_forbigfile2(savefile)
                        if savefile.get() != "":
                            if filename.get().endswith('wav'):
                                if check_file_size_bits(filename.get(), os.path.getsize(filename2.get())):
                                    s.pichidden(filename.get(), filename2.get(), savefile.get())
                                    check_file_error()

                            elif filename.get().endswith('.flac'):
                                changed_filename = os.path.splitext(filename.get())[0] + ".wav"
                                changed_savefile = os.path.splitext(savefile.get())[0] + ".wav"
                                if check_file_repeat(changed_filename):
                                    if check_file_repeat(changed_savefile):
                                        change(filename.get())
                                        if check_file_size_bits(filename.get(), os.path.getsize(filename2.get())):
                                            s.pichidden(changed_filename, filename2.get(), changed_savefile)
                                            check_file_error()
                                            change(changed_savefile)
                                            os.remove(changed_savefile)
                                            os.remove(changed_filename)

                            else:
                                tkinter.messagebox.showwarning(title='Warning',
                                                               message='The file type error!')

                            self.file_name.delete(0, END)
                            self.file_name2.delete(0, END)
                            self.input_pass.delete(0, END)
                        else:
                            tkinter.messagebox.showwarning(title='Warning', message='You miss the saving file name!')
                    else:
                        tkinter.messagebox.showwarning(title='Warning', message='You must input words!')
                else:
                    tkinter.messagebox.showwarning(title='Warning', message='You must set the password!')
            else:
                tkinter.messagebox.showwarning(title='Warning', message='You must put the file in!')

        def clear():
            self.file_name.delete(0, END)
            self.file_name2.delete(0, END)
            self.input_pass.delete(0, END)

        def count_filesize():
            if filename.get() != "":
                if input_password.get() != "":
                    s.setinput_password(input_password.get())
                    s.set_passrange(self.turn_range.get())
                    if filename.get().endswith('wav'):
                        s.count_filesize_forwav_bit(filename.get())
                        if filename2.get() != "":
                            if s.real_bit_count * 8 < os.path.getsize(filename2.get()):
                                tkinter.messagebox.showwarning(title='Warning', message='The Hidden file is too big!')
                            else:
                                tkinter.messagebox.showinfo(title='Information', message='The Hidden file can be save!')
                        else:
                            tkinter.messagebox.showinfo(title='Information', message='You can save ' + str(
                                int(s.real_bit_count / 1024)) + ' KB file.')

                    elif filename.get().endswith('.flac'):
                        changed_filename = os.path.splitext(filename.get())[0] + ".wav"
                        if check_file_repeat(changed_filename):
                            change(filename.get())
                            s.count_filesize_forwav_bit(changed_filename)
                            os.remove(changed_filename)
                            if filename2.get() != "":
                                if s.real_bit_count * 8 < os.path.getsize(filename2.get()):
                                    tkinter.messagebox.showwarning(title='Warning',
                                                                   message='The Hidden file is too big!')
                                else:
                                    tkinter.messagebox.showinfo(title='Information',
                                                                message='The Hidden file can be save!')
                            else:
                                tkinter.messagebox.showinfo(title='Information', message='You can save ' + str(
                                    int(s.real_bit_count / 1024)) + ' KB file.')

                    else:
                        tkinter.messagebox.showwarning(title='Warning',
                                                       message='The file type error!')
                else:
                    tkinter.messagebox.showwarning(title='Warning', message='You must set the password!')
            else:
                tkinter.messagebox.showwarning(title='Warning', message='You must put the file in!')

        self.top_title = Label(self.file_hidden, text="HIDDEN")
        self.top_title.grid(row=1, column=1)

        self.file_browse = Label(self.file_hidden, text="File: ")
        self.file_browse.grid(row=2)

        filename = StringVar()
        self.file_name = Entry(self.file_hidden, textvariable=filename, width=40)
        self.file_name.grid(row=2, column=1)

        self.browse_button = Button(self.file_hidden, text="Browse", command=fileDialog_forbigfile)
        self.browse_button.grid(row=2, column=2)

        self.top_password = Label(self.file_hidden, text="Password: ")
        self.top_password.grid(row=3)

        input_password = StringVar()
        self.input_pass = Entry(self.file_hidden, show="*", textvariable=input_password, width=40)
        self.input_pass.grid(row=3, column=1)

        self.count_button = Button(self.file_hidden, text="count", command=count_filesize)
        self.count_button.grid(row=3, column=2)

        self.top_content = Label(self.file_hidden, text="Hidden file: ")
        self.top_content.grid(row=4)

        filename2 = StringVar()
        self.file_name2 = Entry(self.file_hidden, textvariable=filename2, width=40)
        self.file_name2.grid(row=4, column=1)

        self.browse_button2 = Button(self.file_hidden, text="Browse", command=fileDialog)
        self.browse_button2.grid(row=4, column=2)

        self.ok_button = Button(self.file_hidden, text="OK", command=hidden)
        self.ok_button.grid(row=4, column=3)

        self.clear_button = Button(self.file_hidden, text="clear", command=clear)
        self.clear_button.grid(row=4, column=4)

        self.password_range = Label(self.file_hidden, text="Password strength: ")
        self.password_range.grid(row=5)

        self.turn_range = Scale(self.file_hidden, from_=1, to=127, orient=HORIZONTAL, length=300, tickinterval=126)
        self.turn_range.grid(row=5, column=1)


class file_show:
    def __init__(self, master):
        def change_words_hidden():
            self.file_show.destroy()
            menuBar.destroy()
            words_hidden(self.root)

        def change_words_show():
            self.file_show.destroy()
            menuBar.destroy()
            words_show(self.root)

        def change_digital_watermark():
            self.file_show.destroy()
            menuBar.destroy()
            digitalwatermark(self.root)

        def change_file_hidden():
            self.file_show.destroy()
            menuBar.destroy()
            file_hidden(self.root)

        def change_send_email():
            self.file_show.destroy()
            menuBar.destroy()
            send_email(self.root)

        def _quit():
            self.root.quit()
            self.root.destroy()
            exit()

        self.root = master
        self.root.config()
        self.file_show = Frame(self.root)
        self.file_show.grid()

        # Creating a Menu Bar
        menuBar = Menu(self.root)
        self.root.config(menu=menuBar)

        # Add menu items
        fileMenu = Menu(menuBar, tearoff=0)
        fileMenu.add_command(label="Exit", command=_quit)
        menuBar.add_cascade(label="File", menu=fileMenu)

        fileMode = Menu(menuBar, tearoff=0)
        fileMode.add_command(label="Words Hidden Mode", command=change_words_hidden)
        fileMode.add_command(label="Words Shown Mode", command=change_words_show)
        fileMode.add_command(label="File Shown Mode", command=change_file_hidden)
        fileMode.add_command(label="Digital Watermark", command=change_digital_watermark)
        fileMode.add_command(label="Send email", command=change_send_email)
        menuBar.add_cascade(label="Mode", menu=fileMode)

        def fileDialog():
            filename.set(filedialog.askopenfilename(initialdir="/", title="Select file",
                                                    filetypes=(
                                                        ("wav, flac files", "*.wav *.flac"),
                                                        ("all files", " *.* "))))

        def fileDialog2(savefile):
            savefile.set(filedialog.asksaveasfilename(initialdir="/", title="Save as",
                                                      filetypes=(
                                                          ("all files", " *.* "),
                                                          ("all files", " *.* ")
                                                      )))

        def show():
            if filename.get() != "":
                if input_password.get() != "":
                    s.setpassword(input_password.get())
                    savefile = StringVar()
                    fileDialog2(savefile)
                    if savefile.get() != "":
                        if filename.get().endswith('.wav'):
                            s.picshow(filename.get(), savefile.get())

                        elif filename.get().endswith('.flac'):
                            changed_filename = os.path.splitext(filename.get())[0] + ".wav"
                            if check_file_repeat(changed_filename):
                                if check_file_repeat(savefile.get()):
                                    change(filename.get())
                                    s.picshow(changed_filename, savefile.get())
                                    os.remove(changed_filename)

                        else:
                            tkinter.messagebox.showwarning(title='Warning',
                                                           message='The file type error!')

                        check_file_error()
                        self.file_name.delete(0, END)
                        self.input_pass.delete(0, END)

                    else:
                        tkinter.messagebox.showwarning(title='Warning', message='You miss the saving file name!')
                else:
                    tkinter.messagebox.showwarning(title='Warning', message='You must set the password!')
            else:
                tkinter.messagebox.showwarning(title='Warning', message='You must put the file in!')

        def clear():
            self.file_name.delete(0, END)
            self.input_pass.delete(0, END)

        self.top_title = Label(self.file_show, text="SHOWN")
        self.top_title.grid(row=1, column=1)

        self.file_browse = Label(self.file_show, text="File: ")
        self.file_browse.grid(row=2)

        filename = StringVar()
        self.file_name = Entry(self.file_show, textvariable=filename, width=40)
        self.file_name.grid(row=2, column=1)

        self.browse_button = Button(self.file_show, text="Browse", command=fileDialog)
        self.browse_button.grid(row=2, column=2)

        self.top_password = Label(self.file_show, text="Password: ")
        self.top_password.grid(row=3)

        input_password = StringVar()
        self.input_pass = Entry(self.file_show, show="*", textvariable=input_password, width=40)
        self.input_pass.grid(row=3, column=1)

        self.ok_button = Button(self.file_show, text="OK", command=show)
        self.ok_button.grid(row=3, column=2)

        self.clear_button = Button(self.file_show, text="clear", command=clear)
        self.clear_button.grid(row=3, column=3)


class digitalwatermark:
    def __init__(self, master):
        def change_words_hidden():
            self.water_mark.destroy()
            menuBar.destroy()
            words_hidden(self.root)

        def change_words_show():
            self.water_mark.destroy()
            menuBar.destroy()
            words_show(self.root)

        def change_file_hidden():
            self.water_mark.destroy()
            menuBar.destroy()
            file_hidden(self.root)

        def change_file_show():
            self.water_mark.destroy()
            menuBar.destroy()
            file_show(self.root)

        def change_send_email():
            self.water_mark.destroy()
            menuBar.destroy()
            send_email(self.root)

        def _quit():
            self.root.quit()
            self.root.destroy()
            exit()

        self.root = master
        self.root.config()
        self.water_mark = Frame(self.root)
        self.water_mark.grid()

        # Creating a Menu Bar
        menuBar = Menu(self.root)
        self.root.config(menu=menuBar)

        # Add menu items
        fileMenu = Menu(menuBar, tearoff=0)
        fileMenu.add_command(label="Exit", command=_quit)
        menuBar.add_cascade(label="File", menu=fileMenu)

        fileMode = Menu(menuBar, tearoff=0)
        fileMode.add_command(label="Words Hidden Mode", command=change_words_hidden)
        fileMode.add_command(label="Words Shown Mode", command=change_words_show)
        fileMode.add_command(label="File Hidden Mode", command=change_file_hidden)
        fileMode.add_command(label="File Shown Mode", command=change_file_show)
        fileMode.add_command(label="Send email", command=change_send_email)
        menuBar.add_cascade(label="Mode", menu=fileMode)

        # Browse file
        self.filename = None

        def fileDialog():
            try:

                File = filedialog.askopenfilename(initialdir="/", title="Select file",
                                                  filetypes=(
                                                      ("bmp, png files", "*.bmp *.png"),
                                                      ("all file", " *.* ")
                                                  ))
                self.filename.set(File)

                self.original = Image.open(File)
                self.original = self.original.resize((500, 500))  # resize image
                self.img = ImageTk.PhotoImage(self.original)
                self.XY.create_image(0, 0, image=self.img, anchor="nw")  # add係左上
            except:
                print("Please select an image")

        self.pos = None

        def getlocation(image):
            self.pos = (image.x, image.y)

        self.rgb = None
        self.hx = None

        def colorpicker():
            (self.rgb, self.hx) = colorchooser.askcolor()

        # OK
        def print_all():
            water_mark(self.filename.get(), self.text.get(),
                       self.pos, self.clicked_type.get(),
                       self.clicked_size.get(), self.rgb,
                       self.clicked_bold.get()
                       )

        # Show address
        self.filename = StringVar()
        self.file_name = Entry(self.water_mark, textvariable=self.filename, width=50)
        self.file_name.grid(row=6, column=0, padx=5, pady=5)

        self.browse_button = Button(self.water_mark, text="Browse", command=fileDialog)
        self.browse_button.grid(row=6, column=0, padx=15, pady=15, sticky=W)

        # textarea for watermark
        self.text_label = Label(self.water_mark, text="Watermark text")
        self.text_label.grid(row=0, column=2, padx=5, pady=5, sticky=W)

        self.text = StringVar()
        self.text_area = Entry(self.water_mark, width=30, textvariable=self.text)
        self.text_area.grid(row=1, column=2, padx=20, sticky=N)

        # drop down box (TextType)
        self.type_label = Label(self.water_mark, text="Text Type")
        self.type_label.grid(row=2, column=2, padx=5, pady=5, sticky=NW)
        options_type = [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10"
        ]
        self.clicked_type = StringVar()
        self.clicked_type.set(options_type[0])
        self.drop_type = OptionMenu(self.water_mark, self.clicked_type, *options_type)
        self.drop_type.grid(row=2, column=2, padx=5, pady=5, sticky=W)

        # drop down box (TextSize)
        self.size_label = Label(self.water_mark, text="Text Size")
        self.size_label.grid(row=3, column=2, padx=5, pady=5, sticky=NW)
        options_size = [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10"
        ]
        self.clicked_size = StringVar()
        self.clicked_size.set(options_size[0])
        self.drop_size = OptionMenu(self.water_mark, self.clicked_size, *options_size)
        self.drop_size.grid(row=3, column=2, padx=5, pady=5, sticky=W)

        # drop down box (Text Weight)
        self.weight_label = Label(self.water_mark, text="Text Weight")
        self.weight_label.grid(row=4, column=2, padx=5, pady=5, sticky=NW)
        options_bold = [
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10"
        ]
        self.clicked_bold = StringVar()
        self.clicked_bold.set(options_bold[0])
        self.drop_bold = OptionMenu(self.water_mark, self.clicked_bold, *options_bold)
        self.drop_bold.grid(row=4, column=2, padx=5, pady=5, sticky=W)

        # Determin the X, Y by clicking
        # setting up a tkinter window
        self.XY = Canvas(self.water_mark, width=500, height=500, bg='grey')
        self.XY.grid(row=0, column=0, rowspan=6, padx=15, pady=15)

        # MouseClick event
        self.XY.bind("<Button 1>", getlocation)

        # ColorPicker
        self.color_button = Button(self.water_mark, text="Pick a Color", command=colorpicker)
        self.color_button.grid(row=5, column=2, padx=5, pady=5, sticky=W)

        # Print all data button
        self.ok_button = Button(self.water_mark, text="OK", command=print_all)
        self.ok_button.grid(row=6, column=2, padx=15, pady=15, sticky=NSEW)


class send_email:
    def __init__(self, master):
        def change_words_hidden():
            self.send_mail.destroy()
            menuBar.destroy()
            words_hidden(self.root)

        def change_words_show():
            self.send_mail.destroy()
            menuBar.destroy()
            words_show(self.root)

        def change_file_hidden():
            self.send_mail.destroy()
            menuBar.destroy()
            file_hidden(self.root)

        def change_file_show():
            self.send_mail.destroy()
            menuBar.destroy()
            file_show(self.root)

        def change_digital_watermark():
            self.send_mail.destroy()
            menuBar.destroy()
            digitalwatermark(self.root)

        def _quit():
            self.root.quit()
            self.root.destroy()
            exit()

        def ok_function():
            if self.email_addr.get() != '':
                if self.email_password.get() != '':
                    if self.email_mail.get() != '':
                        if self.input_con.get(1.0, "end-1c") != '':
                            if self.input_subject.get() != '':
                                try:
                                    sendemail(self.email_addr.get(), self.email_password.get(),
                                              self.input_subject.get(),
                                              self.input_con.get(1.0, "end-1c"), self.email_mail.get(),
                                              self.annex_input.get())

                                    self.email_addr.delete(0, END)
                                    self.email_password.delete(0, END)
                                    self.input_subject.delete(0, END)
                                    self.input_con.delete(1.0, END)
                                    self.email_mail.delete(0, END)
                                    self.annex_input.delete(0, END)

                                except smtplib.SMTPAuthenticationError:
                                    tkinter.messagebox.showwarning(title='Warning',
                                                                   message='Your email or password is wrong!')
                            else:
                                tkinter.messagebox.showwarning(title='Warning', message='The subject cannot be none!')
                        else:
                            tkinter.messagebox.showwarning(title='Warning', message='The content cannot be none!')
                    else:
                        tkinter.messagebox.showwarning(title='Warning', message='The receiver cannot be none!')
                else:
                    tkinter.messagebox.showwarning(title='Warning', message='The password cannot be none!')
            else:
                tkinter.messagebox.showwarning(title='Warning', message='The email cannot be none!')

        def annex_call(*args):
            if bool_check.get():
                self.annex_input.configure(state='normal')
                self.annex_button.configure(state='normal')
            else:
                self.annex_input.delete(0, END)
                self.annex_input.configure(state='disable')
                self.annex_button.configure(state='disable')

        def fileDialog():
            filename.set(filedialog.askopenfilename(initialdir="/", title="Select file",
                                                    filetypes=(
                                                        ("bmp, wav, png, flac files", "*.bmp *.wav *.png *.flac"),
                                                        ("all files", " *.* "))))

        self.root = master
        self.root.config()
        self.send_mail = Frame(self.root)
        self.send_mail.grid()

        # Creating a Menu Bar
        menuBar = Menu(self.root)
        self.root.config(menu=menuBar)

        # Add menu items
        fileMenu = Menu(menuBar, tearoff=0)
        fileMenu.add_command(label="Exit", command=_quit)
        menuBar.add_cascade(label="File", menu=fileMenu)

        fileMode = Menu(menuBar, tearoff=0)
        fileMode.add_command(label="Words Hidden Mode", command=change_words_hidden)
        fileMode.add_command(label="Words Shown Mode", command=change_words_show)
        fileMode.add_command(label="File Shown Mode", command=change_file_hidden)
        fileMode.add_command(label="File Hidden Mode", command=change_file_show)
        fileMode.add_command(label="Digital Watermark", command=change_digital_watermark)
        menuBar.add_cascade(label="Mode", menu=fileMode)

        self.top_title = Label(self.send_mail, text="Send Email")
        self.top_title.grid(row=0, column=1)

        self.email_label = Label(self.send_mail, text="Your email: ")
        self.email_label.grid(row=1)

        self.email_addr = Entry(self.send_mail, width=40)
        self.email_addr.grid(row=1, column=1)

        self.password_label = Label(self.send_mail, text="Password: ")
        self.password_label.grid(row=2)

        self.email_password = Entry(self.send_mail, show="*", width=40)
        self.email_password.grid(row=2, column=1)

        self.to_label = Label(self.send_mail, text="To: ")
        self.to_label.grid(row=3)

        self.email_mail = Entry(self.send_mail, width=40)
        self.email_mail.grid(row=3, column=1)

        self.subject_label = Label(self.send_mail, text="Subject: ")
        self.subject_label.grid(row=4)

        self.input_subject = Entry(self.send_mail, width=30)
        self.input_subject.grid(row=4, column=1)

        bool_check = BooleanVar()
        self.annex_check = Checkbutton(self.send_mail, variable=bool_check, text="Annex")
        self.annex_check.grid(row=5)
        bool_check.trace("w", annex_call)

        filename = StringVar()
        self.annex_input = Entry(self.send_mail, state='disable', textvariable=filename, width=40)
        self.annex_input.grid(row=5, column=1)

        self.annex_button = Button(self.send_mail, text="Browse", command=fileDialog, state="disable")
        self.annex_button.grid(row=5, column=2)

        self.top_content = Label(self.send_mail, text="Input content: ")
        self.top_content.grid(row=6)

        self.input_con = Text(self.send_mail, width=60, height=20)
        self.input_con.grid(row=6, column=1)

        self.ok_button = Button(self.send_mail, text="OK", command=ok_function)
        self.ok_button.grid(row=6, column=2)


root = Tk()
SteganGUI(root)
root.mainloop()
